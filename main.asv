mfile_name          = mfilename('fullpath');
[pathstr,name,ext]  = fileparts(mfile_name);
cd(pathstr);
fileparts(matlab.desktop.editor.getActiveFilename)

load project_data2021.mat

%{
Test data hyperparameters
%}
DataParams.Static.NumRepetition = 1;
DataParams.Static.TrainSeqLength = get_length(trainseq_static_1);
DataParams.Static.EachFullSeqLength = get_length(data_static_1)/DataParams.Static.NumRepetition;
DataParams.Static.EachDataSeqLength = DataParams.Static.EachFullSeqLength-DataParams.Static.TrainSeqLength;

DataParams.Q_Static.NumRepetition = 200;
DataParams.Q_Static.TrainSeqLength = get_length(trainseq_qstatic_1);
DataParams.Q_Static.EachFullSeqLength = get_length(data_qstatic_1)/DataParams.Q_Static.NumRepetition;
DataParams.Q_Static.EachDataSeqLength = DataParams.Q_Static.EachFullSeqLength-DataParams.Q_Static.TrainSeqLength;

DataParams.T_Varying.NumRepetition = 500;
DataParams.T_Varying.TrainSeqLength = get_length(trainseq_varying_1);
DataParams.T_Varying.EachFullSeqLength = get_length(data_varying_1)/DataParams.T_Varying.NumRepetition;
DataParams.T_Varying.EachDataSeqLength = DataParams.T_Varying.EachFullSeqLength-DataParams.T_Varying.TrainSeqLength;

%{
Test data measurements
%}
[Static.Seq1.SNR,Static.Seq1.prior_BER] = measure_static_data(DataParams.Static, trainseq_static_1, data_static_1);
[Static.Seq2.SNR,Static.Seq2.prior_BER] = measure_static_data(DataParams.Static, trainseq_static_2, data_static_2);
DataMeasurements.Static = Static;

function length = get_length(seq)
    seq_size = size(seq);
    length = seq_size(end);
end

function [SNR, prior_BER] = calc_SNR_BER(signal, noised_signal)
    SNR = snr(signal, noised_signal);
    
    utils_inputs.task = 'calc_BER';
    utils_inputs.pred_seq = noised_signal;
    utils_inputs.signal_seq = signal;
    prior_BER = shared_utils(utils_inputs);
    utils_inputs.task = [];
end
function [SNR, prior_BER] = measure_static_data(DataParams_Static, train_seq, full_seq)
    noised_train_seq = full_seq(1:DataParams_Static.TrainSeqLength);
    [SNR, prior_BER] = calc_SNR_BER(train_seq, noised_train_seq);
    
    fprintf('Static seq SNR: %.6f \n', SNR);
    fprintf('Static Prior BER: %.6f \n', prior_BER);
end

function [SNR_seq, prior_BER_seq] = measure_q_static_data(DataParams_QStatic, train_seq, full_seq)
    SNR_seq = [];
    prior_BER_seq = [];
    start_index = 1;
    for seq_count = 1:DataParams_QStatic.TrainSeqLength
        noised_train_seq = full_seq(start_index:start_index+DataParams_Static.TrainSeqLength);
        [SNR, prior_BER] = calc_SNR_BER(train_seq, noised_train_seq);
        SNR_seq = [SNR_seq, SNR]
        start_index = start_index + DataParams_QStatic.EachFullSeqLength;
    end
end